name: Deploy Nuxt site to GitHub Pages

on:
  push:
    branches: ["main"]  # Запускается при пуше в основную ветку
  workflow_dispatch:     # Позволяет запускать workflow вручную

permissions:
  contents: read         # Разрешения для чтения содержимого репозитория
  pages: write           # Разрешения для записи на GitHub Pages
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false  # Не отменяет выполняющиеся деплои

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Проверка кода из репозитория

      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
          else
            echo "Unable to determine package manager"
            exit 1
          fi

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Setup Pages
        uses: actions/configure-pages@v5
        with:
          static_site_generator: nuxt  # Инжектирует baseURL и настраивает target

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            dist
            .nuxt
          key: ${{ runner.os }}-nuxt-${{ hashFiles('dist/**') }}
          restore-keys: |
            ${{ runner.os }}-nuxt-

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }} --no-lockfile

      - name: Generate static site
        run: ${{ steps.detect-package-manager.outputs.manager }} run generate

      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist  # Указываем папку с сгенерированным сайтом

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}  # URL развернутого сайта
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
